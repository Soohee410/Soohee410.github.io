I"}#<h1 id="문제">문제</h1>

<ul>
  <li><a href="https://www.acmicpc.net/problem/16928">https://www.acmicpc.net/problem/16928</a></li>
</ul>

<p>뱀과 사다리 게임을 즐겨 하는 큐브러버는 어느 날 궁금한 점이 생겼다.</p>

<p>주사위를 조작해 내가 원하는 수가 나오게 만들 수 있다면, 최소 몇 번만에 도착점에 도착할 수 있을까?</p>

<p>게임은 정육면체 주사위를 사용하며, 주사위의 각 면에는 1부터 6까지 수가 하나씩 적혀있다. 게임은 크기가 10×10이고, 총 100개의 칸으로 나누어져 있는 보드판에서 진행된다. 보드판에는 1부터 100까지 수가 하나씩 순서대로 적혀져 있다.</p>

<p>플레이어는 주사위를 굴려 나온 수만큼 이동해야 한다. 예를 들어, 플레이어가 i번 칸에 있고, 주사위를 굴려 나온 수가 4라면, i+4번 칸으로 이동해야 한다. 만약 주사위를 굴린 결과가 100번 칸을 넘어간다면 이동할 수 없다. 도착한 칸이 사다리면, 사다리를 타고 위로 올라간다. 뱀이 있는 칸에 도착하면, 뱀을 따라서 내려가게 된다. 즉, 사다리를 이용해 이동한 칸의 번호는 원래 있던 칸의 번호보다 크고, 뱀을 이용해 이동한 칸의 번호는 원래 있던 칸의 번호보다 작아진다.</p>

<p>게임의 목표는 1번 칸에서 시작해서 100번 칸에 도착하는 것이다.</p>

<p>게임판의 상태가 주어졌을 때, 100번 칸에 도착하기 위해 주사위를 굴려야 하는 횟수의 최솟값을 구해보자.</p>

<h1 id="입력">입력</h1>

<p>첫째 줄에 게임판에 있는 사다리의 수 N(1 ≤ N ≤ 15)과 뱀의 수 M(1 ≤ M ≤ 15)이 주어진다.</p>

<p>둘째 줄부터 N개의 줄에는 사다리의 정보를 의미하는 x, y (x &lt; y)가 주어진다. x번 칸에 도착하면, y번 칸으로 이동한다는 의미이다.</p>

<p>다음 M개의 줄에는 뱀의 정보를 의미하는 u, v (u &gt; v)가 주어진다. u번 칸에 도착하면, v번 칸으로 이동한다는 의미이다.</p>

<p>1번 칸과 100번 칸은 뱀과 사다리의 시작 또는 끝이 아니다. 모든 칸은 최대 하나의 사다리 또는 뱀을 가지고 있으며, 동시에 두 가지를 모두 가지고 있는 경우는 없다. 항상 100번 칸에 도착할 수 있는 입력만 주어진다.</p>

<h1 id="출력">출력</h1>

<p>100번 칸에 도착하기 위해 주사위를 최소 몇 번 굴려야 하는지 출력한다.</p>

<hr />

<h1 id="풀이">풀이</h1>

<p>최근에는 DFS/BFS 문제 연습한다고 Class3에 있는 DFS/BFS 문제들을 얼추 다 풀어봤는데, 그래도 처음보다는 많이 익숙해지면서 해결능력도 조금씩 생기는 것 같다. 나는 BFS를 이용해서 풀어봤는데, 맞은 사람 답안들을 보니 풀이가 다양한 문제였던 것 같다. 아이디어는, <strong>보드판에서 1부터 6까지 갈 수 있는 칸으로 이동하고 이전 칸에 도달하는 데까지 걸린 주사위 횟수에 1 더하는 것</strong>이다. 사용한 주요 두 리스트는 G와 visited이다.</p>

<ul>
  <li>
    <p>G: 사다리와 뱀으로 인해 이동하게 되는 자리를 반영하기 위해, G라는 리스트에 1부터 100까지 해당 칸의 번호를 담았다. 예를 들어, 뱀도, 사다리도 없는 3번째 칸은 그냥 3을 넣었고, 사다리에 의해 3에서 10으로 이동하는 자리라면, 3번째 칸에 10을 넣는 식이다. 이 G를 이용해서 BFS를 적용하였다.</p>
  </li>
  <li>
    <p>visited: 방문 표시를 나타내면서 동시에 주사위 횟수를 담는 리스트. 처음에는 모두 최대 넘버인 100을 할당하였고, 방문한 칸은 주사위 횟수를 갱신하였다.</p>
  </li>
</ul>

<h3 id="solution-by-bfs">Solution by BFS</h3>

<ul>
  <li>92ms</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>
<span class="n">inf</span> <span class="o">=</span> <span class="mi">100</span>

<span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">G</span><span class="p">,</span><span class="n">visit</span><span class="p">):</span>
    <span class="n">que</span> <span class="o">=</span> <span class="n">deque</span><span class="p">([</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">visit</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">while</span> <span class="n">que</span><span class="p">:</span>
        <span class="n">v</span> <span class="o">=</span> <span class="n">que</span><span class="p">.</span><span class="n">popleft</span><span class="p">()</span>

				<span class="c1">#100번째 칸보다 주사위 횟수가 이미 많은 칸은 더 진행할 필요 없음.
</span>        <span class="k">if</span> <span class="n">visit</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">visit</span><span class="p">[</span><span class="mi">100</span><span class="p">]:</span>  
            <span class="k">continue</span>

        <span class="k">for</span> <span class="n">step</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">v</span> <span class="o">+</span> <span class="n">step</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">:</span>   <span class="c1">#칸의 범위를 넘어가면 생략.
</span>                <span class="k">continue</span>
            <span class="n">num</span> <span class="o">=</span> <span class="n">G</span><span class="p">[</span><span class="n">v</span> <span class="o">+</span> <span class="n">step</span><span class="p">]</span>

            <span class="k">if</span> <span class="n">visit</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">inf</span><span class="p">:</span>  <span class="c1">#방문하지 않은 칸이면
</span>                <span class="n">que</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
                <span class="n">visit</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="n">visit</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">visit</span><span class="p">[</span><span class="mi">100</span><span class="p">]</span>


<span class="k">def</span> <span class="nf">Solution</span><span class="p">():</span>
    <span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
    <span class="n">G</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">101</span><span class="p">))</span>

		<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="n">m</span><span class="p">):</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
        <span class="n">G</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">y</span>

    <span class="n">visit</span> <span class="o">=</span> <span class="p">[</span><span class="n">inf</span><span class="p">]</span> <span class="o">*</span> <span class="mi">101</span>

    <span class="k">print</span><span class="p">(</span><span class="n">bfs</span><span class="p">(</span><span class="n">G</span><span class="p">,</span><span class="n">visit</span><span class="p">))</span>

<span class="n">Solution</span><span class="p">()</span>
</code></pre></div></div>

<p><br /></p>
:ET